`timescale 1ns/1ps

module ahb2apb (
    input wire HCLK,
    input wire HRESETn,
    input wire HSELAPB,
    input wire [31:0] HADDR,
    input wire HWRITE,
    input wire [1:0] HTRANS,
    input wire [31:0] HWDATA,
    output reg HRESP,
    output reg HREADY,
    output reg [31:0] HRDATA,

    input wire [31:0] PRDATA,
    output reg PSEL,
    output reg PENABLE,
    output reg PWRITE,
    output reg [31:0] PADDR,
    output reg [31:0] PWDATA
);

    // Define FSM States
    `define IDLE     3'b000
    `define READ     3'b001
    `define WWAIT    3'b010
    `define WRITE    3'b011
    `define WRITEP   3'b100
    `define WENABLE  3'b101
    `define WENABLEP 3'b110
    `define RENABLE  3'b111

    reg [2:0] ps, ns;
    reg [31:0] TMP_HADDR, TMP_HWDATA;
    reg valid, HWrite;

    // Valid signal generation
    always @(*) begin
        if (HSELAPB && (HTRANS == 2'b10 || HTRANS == 2'b11))
            valid = 1'b1;
        else
            valid = 1'b0;
    end

    // State Register (with Reset)
    always @(posedge HCLK or negedge HRESETn) begin
        if (~HRESETn)
            ps <= `IDLE;
        else
            ps <= ns;
    end

    // Next State & Output Logic
    always @(*) begin
        // Default output assignments
        PSEL    = 1'b0;
        PENABLE = 1'b0;
        PWRITE  = 1'b0;
        PADDR   = 32'd0;
        PWDATA  = 32'd0;
        HREADY  = 1'b1;
        HRESP   = 1'b0;
        HRDATA  = 32'd0;

        ns = ps;  // Default next state

        case (ps)

            `IDLE: begin
                if (!valid)
                    ns = `IDLE;
                else if (valid && ~HWRITE)
                    ns = `READ;
                else if (valid && HWRITE)
                    ns = `WWAIT;
            end

            `READ: begin
                PSEL   = 1'b1;
                PADDR  = HADDR;
                PWRITE = 1'b0;
                HREADY = 1'b0;
                ns     = `RENABLE;
            end

            `RENABLE: begin
                PSEL    = 1'b1;
                PENABLE = 1'b1;
                PADDR   = HADDR;
                HRDATA  = PRDATA;
                HREADY  = 1'b1;

                if (valid && ~HWRITE)
                    ns = `READ;
                else if (valid && HWRITE)
                    ns = `WWAIT;
                else
                    ns = `IDLE;
            end

            `WWAIT: begin
                HREADY     = 1'b0;
                TMP_HADDR  = HADDR;
                TMP_HWDATA = HWDATA;
                HWrite     = HWRITE;

                if (!valid)
                    ns = `WRITE;
                else
                    ns = `WRITEP;
            end

            `WRITE: begin
                PSEL    = 1'b1;
                PADDR   = TMP_HADDR;
                PWDATA  = TMP_HWDATA;
                PWRITE  = 1'b1;
                HREADY  = 1'b0;
                ns      = valid ? `WENABLEP : `WENABLE;
            end

            `WRITEP: begin
                PSEL    = 1'b1;
                PADDR   = TMP_HADDR;
                PWDATA  = TMP_HWDATA;
                PWRITE  = 1'b1;
                HREADY  = 1'b0;
                TMP_HADDR  = HADDR;
                TMP_HWDATA = HWDATA;
                HWrite     = HWRITE;
                ns         = `WENABLEP;
            end

            `WENABLE: begin
                PSEL    = 1'b1;
                PENABLE = 1'b1;
                PADDR   = TMP_HADDR;
                PWDATA  = TMP_HWDATA;
                PWRITE  = 1'b1;
                HREADY  = 1'b1;

                if (valid && ~HWRITE)
                    ns = `READ;
                else if (valid && HWRITE)
                    ns = `WWAIT;
                else
                    ns = `IDLE;
            end

            `WENABLEP: begin
                PSEL    = 1'b1;
                PENABLE = 1'b1;
                PADDR   = TMP_HADDR;
                PWDATA  = TMP_HWDATA;
                PWRITE  = 1'b1;
                HREADY  = 1'b1;

                if (!valid && HWrite)
                    ns = `WRITE;
                else if (valid && HWrite)
                    ns = `WRITEP;
                else
                    ns = `READ;
            end

            default: ns = `IDLE;

        endcase
    end

endmodule
